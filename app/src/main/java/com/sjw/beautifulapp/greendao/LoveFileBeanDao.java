package com.sjw.beautifulapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sjw.beautifulapp.bean.LoveFileBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOVE_FILE_BEAN".
*/
public class LoveFileBeanDao extends AbstractDao<LoveFileBean, Long> {

    public static final String TABLENAME = "LOVE_FILE_BEAN";

    /**
     * Properties of entity LoveFileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Love_id = new Property(0, Long.class, "love_id", true, "_id");
        public final static Property FileTitle = new Property(1, String.class, "fileTitle", false, "FILE_TITLE");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property IsType = new Property(3, String.class, "isType", false, "IS_TYPE");
        public final static Property IsEdit = new Property(4, boolean.class, "isEdit", false, "IS_EDIT");
        public final static Property IsSelect = new Property(5, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property CompressPath = new Property(7, String.class, "compressPath", false, "COMPRESS_PATH");
        public final static Property CutPath = new Property(8, String.class, "cutPath", false, "CUT_PATH");
        public final static Property Duration = new Property(9, long.class, "duration", false, "DURATION");
        public final static Property IsChecked = new Property(10, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property IsCut = new Property(11, boolean.class, "isCut", false, "IS_CUT");
        public final static Property Position = new Property(12, int.class, "position", false, "POSITION");
        public final static Property Num = new Property(13, int.class, "num", false, "NUM");
        public final static Property MimeType = new Property(14, int.class, "mimeType", false, "MIME_TYPE");
        public final static Property PictureType = new Property(15, String.class, "pictureType", false, "PICTURE_TYPE");
        public final static Property Compressed = new Property(16, boolean.class, "compressed", false, "COMPRESSED");
        public final static Property Width = new Property(17, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(18, int.class, "height", false, "HEIGHT");
    }


    public LoveFileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoveFileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOVE_FILE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: love_id
                "\"FILE_TITLE\" TEXT," + // 1: fileTitle
                "\"FILE_PATH\" TEXT," + // 2: filePath
                "\"IS_TYPE\" TEXT," + // 3: isType
                "\"IS_EDIT\" INTEGER NOT NULL ," + // 4: isEdit
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 5: isSelect
                "\"PATH\" TEXT," + // 6: path
                "\"COMPRESS_PATH\" TEXT," + // 7: compressPath
                "\"CUT_PATH\" TEXT," + // 8: cutPath
                "\"DURATION\" INTEGER NOT NULL ," + // 9: duration
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 10: isChecked
                "\"IS_CUT\" INTEGER NOT NULL ," + // 11: isCut
                "\"POSITION\" INTEGER NOT NULL ," + // 12: position
                "\"NUM\" INTEGER NOT NULL ," + // 13: num
                "\"MIME_TYPE\" INTEGER NOT NULL ," + // 14: mimeType
                "\"PICTURE_TYPE\" TEXT," + // 15: pictureType
                "\"COMPRESSED\" INTEGER NOT NULL ," + // 16: compressed
                "\"WIDTH\" INTEGER NOT NULL ," + // 17: width
                "\"HEIGHT\" INTEGER NOT NULL );"); // 18: height
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOVE_FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoveFileBean entity) {
        stmt.clearBindings();
 
        Long love_id = entity.getLove_id();
        if (love_id != null) {
            stmt.bindLong(1, love_id);
        }
 
        String fileTitle = entity.getFileTitle();
        if (fileTitle != null) {
            stmt.bindString(2, fileTitle);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String isType = entity.getIsType();
        if (isType != null) {
            stmt.bindString(4, isType);
        }
        stmt.bindLong(5, entity.getIsEdit() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsSelect() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(8, compressPath);
        }
 
        String cutPath = entity.getCutPath();
        if (cutPath != null) {
            stmt.bindString(9, cutPath);
        }
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCut() ? 1L: 0L);
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getNum());
        stmt.bindLong(15, entity.getMimeType());
 
        String pictureType = entity.getPictureType();
        if (pictureType != null) {
            stmt.bindString(16, pictureType);
        }
        stmt.bindLong(17, entity.getCompressed() ? 1L: 0L);
        stmt.bindLong(18, entity.getWidth());
        stmt.bindLong(19, entity.getHeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoveFileBean entity) {
        stmt.clearBindings();
 
        Long love_id = entity.getLove_id();
        if (love_id != null) {
            stmt.bindLong(1, love_id);
        }
 
        String fileTitle = entity.getFileTitle();
        if (fileTitle != null) {
            stmt.bindString(2, fileTitle);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String isType = entity.getIsType();
        if (isType != null) {
            stmt.bindString(4, isType);
        }
        stmt.bindLong(5, entity.getIsEdit() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsSelect() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(8, compressPath);
        }
 
        String cutPath = entity.getCutPath();
        if (cutPath != null) {
            stmt.bindString(9, cutPath);
        }
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCut() ? 1L: 0L);
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getNum());
        stmt.bindLong(15, entity.getMimeType());
 
        String pictureType = entity.getPictureType();
        if (pictureType != null) {
            stmt.bindString(16, pictureType);
        }
        stmt.bindLong(17, entity.getCompressed() ? 1L: 0L);
        stmt.bindLong(18, entity.getWidth());
        stmt.bindLong(19, entity.getHeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoveFileBean readEntity(Cursor cursor, int offset) {
        LoveFileBean entity = new LoveFileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // love_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isType
            cursor.getShort(offset + 4) != 0, // isEdit
            cursor.getShort(offset + 5) != 0, // isSelect
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // compressPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cutPath
            cursor.getLong(offset + 9), // duration
            cursor.getShort(offset + 10) != 0, // isChecked
            cursor.getShort(offset + 11) != 0, // isCut
            cursor.getInt(offset + 12), // position
            cursor.getInt(offset + 13), // num
            cursor.getInt(offset + 14), // mimeType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pictureType
            cursor.getShort(offset + 16) != 0, // compressed
            cursor.getInt(offset + 17), // width
            cursor.getInt(offset + 18) // height
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoveFileBean entity, int offset) {
        entity.setLove_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsEdit(cursor.getShort(offset + 4) != 0);
        entity.setIsSelect(cursor.getShort(offset + 5) != 0);
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompressPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCutPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDuration(cursor.getLong(offset + 9));
        entity.setIsChecked(cursor.getShort(offset + 10) != 0);
        entity.setIsCut(cursor.getShort(offset + 11) != 0);
        entity.setPosition(cursor.getInt(offset + 12));
        entity.setNum(cursor.getInt(offset + 13));
        entity.setMimeType(cursor.getInt(offset + 14));
        entity.setPictureType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompressed(cursor.getShort(offset + 16) != 0);
        entity.setWidth(cursor.getInt(offset + 17));
        entity.setHeight(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoveFileBean entity, long rowId) {
        entity.setLove_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoveFileBean entity) {
        if(entity != null) {
            return entity.getLove_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoveFileBean entity) {
        return entity.getLove_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
